# -*- coding: utf-8 -*-
"""TransfrmparaADNtoARN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MtOlhItZlhIzCmAX6Bzi_Syr4OfNcyiu
"""

!pip install biopython

!pip install transformers

"""Aqi vamos a hacer todo el rollo de cargar solo el txt que ya se secuencio de las cadenas del gen GRAP1"""

from transformers import BertModel, BertTokenizer, AdamW, get_linear_schedule_with_warmup
import torch
import numpy as np
from sklearn.model_selection import train_test_split
from torch import nn, optim
from torch.utils.data import Dataset, DataLoader
import pandas as pd
from textwrap import wrap

#inicializamos variables
RANDOM_SEED=42
MAX_LEN=200
BATCH_SIZE=16
DATASET_PATH='/content/drive/My Drive/ProyectInt/inEmbSegCancer.csv'
N_CLASES=2
np.random.seed(RANDOM_SEED)
torch.manual_seed(RANDOM_SEED)
device=torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

#cargar dataset
from google.colab import drive
drive.mount('/content/drive',force_remount=True)
df=pd.read_csv(DATASET_PATH)
df=df[0:10000]

print(df.head())
print(df.shape)
print("\n".join(wrap(df["segmento"][147])))

df['label']=(df['tipoVar']=="protein-cancer").astype(int)
df.drop('tipoVar',axis=1,inplace=True)
df.head()

#TOKENIZAR
#cargar modelo ya pre-entrenado
PRE_TRAINED_MODEL_NAME='bert-base-cased'
tokenizer=BertTokenizer.from_pretrained(PRE_TRAINED_MODEL_NAME)

#Ejemplo del los tokens
simple_example='NNNNNNNNCCUGUGAAUCAUCAUAAAGAUAUUGUGAAUAUUAAGAACAAUAUCUGCAACAAGUCCUU'
tokens=tokenizer.tokenize(simple_example)
token_ids=tokenizer.convert_tokens_to_ids(tokens)
print("Segmento:",simple_example)
print("Tokens:",tokens)
print("Tokens numericos", token_ids)

#tokens especiales para bert
encoding = tokenizer.encode_plus(
    simple_example,
    max_length = 52,
    truncation = True,
    add_special_tokens = True,
    return_token_type_ids = False,
    padding = True,
    return_attention_mask = True,
    return_tensors = 'pt'
)
encoding.keys()

print(tokenizer.convert_ids_to_tokens(encoding['input_ids'][0]))
print(encoding['input_ids'][0])
print(encoding['attention_mask'][0])

#Creacion del dataset

class segmentDataSet(Dataset):

  def __init__(self,segmento,labels,tokenizer,max_len):
    self.segmento = segmento
    self.labels = labels
    self.tokenizer = tokenizer
    self.max_len = max_len

  def __len__(self):
      return len(self.segmento)
    
  def __getitem__(self, item):
    segmento = str(self.segmento[item])
    label = self.labels[item]
    encoding = tokenizer.encode_plus(
        segmento,
        max_length = self.max_len,
        truncation = True,
        add_special_tokens = True,
        return_token_type_ids = False,
        padding = True,
        return_attention_mask = True,
        return_tensors = 'pt'
        )
    

    return {
          'Segmento': segmento,
          'input_ids': encoding['input_ids'].flatten(),
          'attention_mask': encoding['attention_mask'].flatten(),
          'label': torch.tensor(label, dtype=torch.long)
      }

#cargar los datos
def data_loader(df, tokenizer, max_len, batch_size):
  dataset = segmentDataSet(
      segmento = df.segmento.to_numpy(),
      labels = df.label.to_numpy(),
      tokenizer = tokenizer,
      max_len = MAX_LEN
  )

  return DataLoader(dataset, batch_size = BATCH_SIZE, num_workers = 2)

df_train, df_test = train_test_split(df, test_size = 0.2, random_state=RANDOM_SEED)
train_data_loader = data_loader(df_train, tokenizer, MAX_LEN, BATCH_SIZE)
test_data_loader = data_loader(df_test, tokenizer, MAX_LEN, BATCH_SIZE)

#MOdelo BERT
class BERTadn(nn.Module):

  def __init__(self, n_classes):
    super(BERTadn, self).__init__()
    self.bert = BertModel.from_pretrained(PRE_TRAINED_MODEL_NAME)
    self.drop = nn.Dropout(p=0.3)
    self.linear = nn.Linear(self.bert.config.hidden_size, n_classes)

  def forward(self, input_ids, attention_mask):
    _, cls_output = self.bert(
        input_ids = input_ids,
        attention_mask = attention_mask
    )
    drop_output = self.drop(cls_output)
    output = self.linear(drop_output)
    return output

model=BERTadn(N_CLASES)
model=model.to(device)
print(model)

# ENTRENAMIENTO
EPOCHS = 5
optimizer = AdamW(model.parameters(), lr=2e-5, correct_bias=False)
total_steps = len(train_data_loader) * EPOCHS
scheduler = get_linear_schedule_with_warmup(
    optimizer,
    num_warmup_steps = 0,
    num_training_steps = total_steps
)
loss_fn = nn.CrossEntropyLoss().to(device)

# Iteración entrenamiento
def train_model(model, data_loader, loss_fn, optimizer, device, scheduler, n_examples):
  model = model.train()
  losses = []
  correct_predictions = 0
  batch=BATCH_SIZE
  for batch in data_loader:
    input_ids = batch['input_ids'].to(device)
    attention_mask = batch['attention_mask'].to(device)
    labels = batch['label'].to(device)
    outputs = model(input_ids = input_ids, attention_mask = attention_mask)
    _, preds = torch.max(outputs, dim=1)
    loss = loss_fn(outputs, labels)
    correct_predictions += torch.sum(preds == labels)
    losses.append(loss.item())
    loss.backward()
    nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)
    optimizer.step()
    scheduler.step()
    optimizer.zero_grad()
  return correct_predictions.double()/n_examples, np.mean(losses)

def eval_model(model, data_loader, loss_fn, device, n_examples):
  model = model.eval()
  losses = []
  correct_predictions = 0
  with torch.no_grad():
    for batch in data_loader:
      input_ids = batch['input_ids'].to(device)
      attention_mask = batch['attention_mask'].to(device)
      labels = batch['label'].to(device)
      outputs = model(input_ids = input_ids, attention_mask = attention_mask)
      _, preds = torch.max(outputs, dim=1)
      loss = loss_fn(outputs, labels)
      correct_predictions += torch.sum(preds == labels)
      losses.append(loss.item())
  return correct_predictions.double()/n_examples, np.mean(losses)

def classifySegment(segment_text):
  encoding_segment = tokenizer.encode_plus(
      segment_text,
      max_length = MAX_LEN,
      truncation = True,
      add_special_tokens = True,
      return_token_type_ids = False,
      padding = True,
      return_attention_mask = True,
      return_tensors = 'pt'
      )
  
  input_ids = encoding_segment['input_ids'].to(device)
  attention_mask = encoding_segment['attention_mask'].to(device)
  output = model(input_ids, attention_mask)
  _, prediction = torch.max(output, dim=1)
  print("\n".join(wrap(segment_text)))
  if prediction:
    print('Sentimiento predicho: Sin variacion Cancer')
  else:
    print('Sentimiento predicho: Cancer')

# Entrenamiento
for epoch in range(EPOCHS):
  print('Epoch {} de {}'.format(epoch+1, EPOCHS))
  print('------------------')
  train_acc, train_loss = train_model(model, train_data_loader, loss_fn, optimizer, device, scheduler, len(df_train))
  test_acc, test_loss = eval_model(model, test_data_loader, loss_fn, device, len(df_test))
  print('Entrenamiento: Loss: {}, accuracy: {}'.format(train_loss, train_acc))
  print('Validación: Loss: {}, accuracy: {}'.format(test_loss, test_acc))
  print('')

segment_text="UUUCAAAGAUUUUUACACUGCUCUCUACUGGUGUCAUAUUAGAUCACUAGGUGUAGAGUGCAGUACAUCU"
classifySegment(segment_text)